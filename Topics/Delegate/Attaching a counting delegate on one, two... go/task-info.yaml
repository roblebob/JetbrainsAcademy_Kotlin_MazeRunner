type: code
custom_name: "Attaching a counting delegate on one, two... go!"
files:
  - name: src/Main.kt
    visible: true
    highlight_level: NONE
    text: |-
      interface ICounter {
          var count: Int
          fun increaseCount()
          fun getCurrentCount(): Int
      }
      
      class Counter(override var count: Int) : ICounter {
          // In case we need to count differently, this function can be altered
          override fun increaseCount() {
              count++
          }
      
          override fun getCurrentCount(): Int = count
      }
      
      // Do not change the code above
      
      class Iterator() // Your code here
      {
          // Your code here
      }
      
      // Do not change the code below
      
      fun main() {
          val a = readln().toInt()
      
          // Set initial value to counter
          val counter = Counter(a)
      
          // Create iterator
          val it = Iterator(counter)
      
          // Do some test iterations
          for (i in 1..5) {
              it.next()
          }
      
          println(it.getCurrentCount())
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/21415#comment
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: "Sat, 20 Jan 2024 13:18:10 UTC"
record: -1
submission_language: kotlin
